<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>enkatsu log</title>
    <link>https://blog.enkatsu.org/</link>
    <description>Recent content on enkatsu log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 02 Jan 2023 00:00:00 +0900</lastBuildDate><atom:link href="https://blog.enkatsu.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>p5.jsスケッチを溜めておくためのテンプレートリポジトリを作った</title>
      <link>https://blog.enkatsu.org/posts/p5js-garally-template/</link>
      <pubDate>Mon, 02 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://blog.enkatsu.org/posts/p5js-garally-template/</guid>
      <description>概要 Link to heading 前から、p5.jsのスケッチを溜めておくための、 HTML &amp;amp; JS テンプレートが欲しいと思っていたので作った。
OpenProcessingを使えばいいとも思うけど、 OpenProcessingだとiframeを使っているからなのか、 うまく動かない場合があるし、セルフホスティングした方が使い勝手がいいことも多い。
使い方 Link to heading https://github.com/enkatsu/p5js-garally-template
上記のテンプレートリポジトリを使って、自分のリポジトリを作成する。 作ったリポジトリを、ローカルにクローンしてきたら、 下記のコマンドで依存パッケージをインストールする。
npm i スケッチを追加する Link to heading 下記のコマンドで、新規のスケッチを追加できる。 ${SKETCH_TITLE} にはスケッチのタイトルを入力する。
node commands.mjs sketch:add -t ${SKETCH_TITLE} 開発用サーバを起動 Link to heading 下記のコマンドで開発用サーバを起動できる。
npm start http://localhost:3000
を開くとスケッチの一覧を表示できる。
ビルド Link to heading 下記のコマンドでビルド結果が ./docs に出力される。 gulpfile.mjs の distDirectory を変更すれば、出力先を変更できる。
npm run build まとめ Link to heading 下記のURLが、実際にこのテンプレートを使ったリポジトリとWebページ。
https://github.com/enkatsu/p5js-sketches
https://enkatsu.github.io/p5js-sketches/
今回はHTMLテンプレートエンジンにEJSを使った。 今の主流のテンプレートエンジンが何なのかわからないので、そのうち差し替えるかも。
あとは，テーマを設定できるようにしたいなーとも思ってる。
追記 Link to heading スケッチのサムネイルを設定できるようにした。</description>
    </item>
    
    <item>
      <title>ArduinoとWiiヌンチャクコントローラでマウスを作る</title>
      <link>https://blog.enkatsu.org/posts/arduino-wii-nunchuck/</link>
      <pubDate>Sun, 25 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.enkatsu.org/posts/arduino-wii-nunchuck/</guid>
      <description>
目的 Link to heading Wiiヌンチャクコントローラでマウスを作る
材料 Link to heading Arduino Leonardo Wiiヌンチャクコントローラ 手順 Link to heading 「wii nunchuck arduino」などで検索すると色々資料が出てくる。 WiiヌンチャクコントローラはI2C通信を使用しているようなので、Wireライブラリを使用する。 またArduinoによりマウス操作を行うため、Mouseライブラリを使用する。 MouseライブラリはArduino LeonardoとArduino Microに対応しているので、今回はArduino Leonardoを使用した。 Wiiヌンチャクコントローラの端子を切ってワイヤストリッパで剥くとこんな感じに赤、黒、緑、黄色の線が出てくる。 これらを以下のように配線する。
+(赤) -&amp;gt; 3.3V -(黒) -&amp;gt; GND SDA(緑) -&amp;gt; D2 SCL(黄色) -&amp;gt; D3 プログラムは以下のリポジトリから enkatsu/NunchuckMouse
課題 Link to heading 今のままではスクロールができないのでブラウザの操作が困難 マウスのスピードを調整可能にする 参考 Link to heading todbot/wiichuck_adapter 片手でゲームをしたい！ </description>
    </item>
    
    <item>
      <title>SwiftOSCをmacOSアプリ開発に使う方法</title>
      <link>https://blog.enkatsu.org/posts/swiftos/</link>
      <pubDate>Sat, 24 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.enkatsu.org/posts/swiftos/</guid>
      <description> Swift Package Managerからインストールする方法 Link to heading 下記のPRが出ているが，まだマージされていないので
https://github.com/ExistentialAudio/SwiftOSC/pull/61
下記のリポジトリとブランチを指定してインストールする
https://github.com/soundflix/SwiftOSC/tree/dev
UDPを使用する際のエラー対応 Link to heading App Sandbox -&amp;gt; Network -&amp;gt; Incomming Connections (Server) と Outgoing Connections (Client) にチェックを入れる
https://github.com/Kitura/BlueSocket/issues/103 https://stackoverflow.com/questions/47797446/nsposixerrordomain-when-binding-to-socket-on-macos-10-12 </description>
    </item>
    
    <item>
      <title>UnityでreacTIVisionを使う方法</title>
      <link>https://blog.enkatsu.org/posts/unity-reactivision/</link>
      <pubDate>Sat, 24 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.enkatsu.org/posts/unity-reactivision/</guid>
      <description>ライブラリのダウンロード Link to heading ここからTUIO11_NETをダウンロードする。
https://sourceforge.net/projects/reactivision/files/TUIO 1.1/TUIO-Clients 1.1.5/
ライブラリのインポート Link to heading TUIO11_NETの中にある、以下のファイルを削除する。 これらのファイルは、C#でTUIOを扱うサンプルプロジェクトだが、 Unityに取り込んだ際にエラーが発生してしまうため削除しておく。
TUIO_CSHARP.sln TUIO_DEMO.csproj TUIO_DUMP.csproj TUIO_LIB.csproj TuioDemo.cs TuioDemoObject.cs TuioDump.cs TUIO11_NETをUnityプロジェクトのAssets以下に配置する。
サンプルの実行 Link to heading Create EmptyでEmptyGameObjectを作成し、 Add Component &amp;gt; New script から新規のコンポーネントを追加する。 次に、作成したコードに下記のコードに置き換える。 ReacTIVisionを起動した状態で、 UnityプロジェクトをRunすれば動作する。
using TUIO; using UnityEngine; public class ReactiVisionMain : MonoBehaviour, TuioListener { private TuioClient client; void Start() { client = new TuioClient(3333); client.addTuioListener(this); client.connect(); if (client.isConnected()) { Debug.Log(&amp;#34;connect!!&amp;#34;); } } void Update() { } public void addTuioBlob(TuioBlob tblb) { } public void addTuioCursor(TuioCursor tcur) { } public void addTuioObject(TuioObject tobj) { Debug.</description>
    </item>
    
    <item>
      <title>Gradleを使ってProcessingライブラリを作る</title>
      <link>https://blog.enkatsu.org/posts/p5library-gradle-template/</link>
      <pubDate>Fri, 23 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.enkatsu.org/posts/p5library-gradle-template/</guid>
      <description>Processingライブラリを作ろうとすると、 パスの設定などめんどくさい作業が多いです。
そこで、Gradleを使って簡単にライブラリを作れるテンプレートを作ったので紹介したいと思います。
準備 Link to heading まずはGradleをインストールしましょう。
Macの場合、Homebrewが入っていれば brew install gradle でインストールできます。
processing-library-template-gradleを使ったライブラリの作り方 Link to heading ライブラリのテンプレートはこちらを使っていきます。
今回はhelloP5Libというライブラリを作る想定で書いていきます。
クラスはhello.p5.libパッケージのHelloクラスのみです。 このライブラリの使い方はこんな感じです。
import hello.p5.lib.*; Hello hello; void setup() { size(300, 300); hello = new Hello(this, &amp;#34;Taro&amp;#34;); } void draw() { background(0); hello.draw(100, 100); } 使い方 Link to heading GitHubのprocessing-library-template-gradleのページから、 Use this template を選択して、テンプレートを使用したリポジトリを作成して、ローカルにクローンしてきます。
git clone https://github.com/enkatsu/${YOUR_REPOSITORY}.git この時のディレクトリ構造はこんな感じです。
. ├── LICENSE ├── README.md ├── build.gradle ├── examples # ライブラリのサンプルスケッチ │ └── HelloLibrary │ └── HelloLibrary.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://blog.enkatsu.org/about/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.enkatsu.org/about/</guid>
      <description>このサイトは遠藤勝也の備忘録です。
2018年までは、技術記事サービスに備忘録を書いていましたが、 独立した媒体で情報を公開するために、このサイトを立ち上げました。 以前まで書いていた記事は、こちらに徐々に移行していこうと思っています。
サイト内の全ての記事は、Creative Commons Licenseの条件に従う限り自由に利用していただいて構いません。</description>
    </item>
    
    <item>
      <title>M5StickCのファームウェア更新方法</title>
      <link>https://blog.enkatsu.org/posts/m5stick-update/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.enkatsu.org/posts/m5stick-update/</guid>
      <description> 手順 Link to heading 下記のURLからファームウェアアップデートツールをダウンロードする。
https://m5stack.oss-cn-shenzhen.aliyuncs.com/resource/software/Updater_FW20200114_A2_BTV231
次に、下記のコマンドで実行権限を付与する。
cd ~/Downloads chmod +x Updater_FW20200114_A2_BTV231 M5StickCをUSBで接続する。
FinderでDownloadsを開き、Updater_FW20200114_A2_BTV231を「右クリック -&amp;gt; 開く」で実行する。
最後に、「Press enter to continue&amp;hellip;」と表示されたらreturnを押してファームウェアアップデートを実行する。
参考資料 Link to heading https://qiita.com/SamAkada/items/fa32d6072a832a10cd84 https://tech.fusic.co.jp/posts/2020-02-12-macos-catalina-m5stickc/ </description>
    </item>
    
    <item>
      <title>p5.jsとArduinoを接続する</title>
      <link>https://blog.enkatsu.org/posts/p5serial/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.enkatsu.org/posts/p5serial/</guid>
      <description>接続方法の比較 Link to heading p5-serial(p5.serialserver &amp;#43; p5.serialport) Link to heading ITP Camp2016でスタートしているプロジェクト 2019 Google Summer of Codeを獲得 2022 Processing Fellowshipを獲得 Web socketを使用 様々なブラウザで動作する Webソケットサーバ（p5.serialserver）が必要 WebソケットサーバはNode.js実装とProcessing実装が用意されている Processing実装は動かなかった（Processing4.0.1） 4.1.1では動作した（https://github.com/processing/processing4/pull/577） p5.web-serial Link to heading Web Serial APIを使用 ChromeとEdgeのみで動作 スマートフォンから使うにはBTなどを使う必要がある？ p5-serialの環境構築 Link to heading 検証環境 Link to heading Node.js: v14.18.1 p5.serialserver（Webソケットサーバ側） Link to heading git clone https://github.com/p5-serial/p5.serialserver.git cd p5.serialserver npm install node startserver.js Arduino Link to heading int buttonPin = 7; void setup() { Serial.</description>
    </item>
    
    <item>
      <title>ProcessingでQRコードを使う</title>
      <link>https://blog.enkatsu.org/posts/processing-qrcode/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.enkatsu.org/posts/processing-qrcode/</guid>
      <description>はじめに Link to heading ProcessingでQRコードを使う為のライブラリは有名なところだと、 Daniel Shiffmanのqrcode-processingがあります。 ですが今回はZXingP5という、Java製のQRコードライブラリZXingのProcessingラッパーを使います。
このライブラリの特徴はQRコードの左上、右上、左下にある四角形の座標が取得できることです。 大まかなQRコードの位置と大きさ、角度を取得することができます。 なので、このようにARマーカのようにQRコードを扱うことができます。 実はこのライブラリは自分が作ったので、コメントやIssueをいただけたら、 修正や改良をしたいと思います。
インストール Link to heading ここからZipをダウンロードして、解凍したディレクトリをZXingP5にリネームして、PROCESSING_PATH/library に配置、 もしくはターミナルで以下のコマンドを実行します。
cd PROCESSING_PATH/library git clone https://github.com/enkatsu/ZXingP5.git 使い方 Link to heading サンプルは3つ入っていて内容はこのようになっています。
WriterSample: 文字列からQRコードのPImageを生成するサンプル ReaderSample: QRコードの映ったPImageから文字列を読み取るサンプル ReaderAdvancedSample: QRコードの映ったPImageから文字列と座標、大きさを読み取るサンプル 2018年1月にmakezine.jpさんで取り上げていただきました
ProcessingでQRコードを読み書きする</description>
    </item>
    
    <item>
      <title>Processingでフォントのアウトラインを取得する</title>
      <link>https://blog.enkatsu.org/posts/p5-font-outline/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0900</pubDate>
      
      <guid>https://blog.enkatsu.org/posts/p5-font-outline/</guid>
      <description>PFont font; PShape pShape; void setup() { size(300, 200); font = createFont(&amp;#34;HiraginoSans-W3&amp;#34;, 100); pShape = font.getShape(&amp;#39;P&amp;#39;, 1); pShape.beginShape(); pShape.strokeWeight(1); pShape.stroke(0); pShape.fill(255); pShape.endShape(); background(100); translate(100, 100); shape(pShape, 0, 0); } void draw() { } PFont font; PShape anchor, shape; ArrayList&amp;lt;PVector&amp;gt; vectors; float x = 100; float y = 100; int holdIndex = -1; void setup() { size(300, 200); font = createFont(&amp;#34;HiraginoSans-W3&amp;#34;, 100); shape = font.getShape(&amp;#39;P&amp;#39;, 1); shape.beginShape(); shape.strokeWeight(1); shape.stroke(0); shape.fill(255); shape.endShape(); anchor = font.</description>
    </item>
    
  </channel>
</rss>
